let currentData = { percent: 0, title: "GitHub", timestamp: Date.now() };
let updateInterval = null;
let windowResizeObserver = null;

document.addEventListener("DOMContentLoaded", function () {
  const usageText = document.getElementById("usageText");
  const progressBar = document.getElementById("progressBar");
  const status = document.getElementById("status");
  const refreshBtn = document.getElementById("refreshBtn");
  const closeBtn = document.getElementById("closeBtn");

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ window resize
  function handleWindowResize() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const width = window.innerWidth;
    const height = window.innerHeight;

    console.log(`üìè Window resized to: ${width}x${height}`);

    // ‡∏õ‡∏£‡∏±‡∏ö font size ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
    if (width < 250) {
      document.body.style.fontSize = "0.85em";
    } else if (width < 300) {
      document.body.style.fontSize = "0.9em";
    } else {
      document.body.style.fontSize = "1em";
    }

    // Force repaint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ CSS ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    document.body.style.display = "none";
    document.body.offsetHeight; // trigger reflow
    document.body.style.display = "flex";
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ResizeObserver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î
  if (window.ResizeObserver) {
    windowResizeObserver = new ResizeObserver((entries) => {
      handleWindowResize();
    });

    windowResizeObserver.observe(document.body);
  } else {
    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
    window.addEventListener("resize", handleWindowResize);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  function updateDisplay(data) {
    if (data && typeof data.percent === "number") {
      usageText.textContent = `${data.percent.toFixed(1)}%`;
      progressBar.style.width = `${Math.min(data.percent, 100)}%`;
      status.textContent = `Updated: ${new Date(
        data.timestamp
      ).toLocaleTimeString()}`;
      status.className = "status";

      console.log("‚úÖ Display updated:", data.percent);
    } else {
      usageText.textContent = "--.--%";
      progressBar.style.width = "0%";
      status.textContent = "No data available";
      status.className = "status error";
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å storage
  async function fetchData() {
    try {
      console.log("üîç Fetching data from storage...");
      const result = await chrome.storage.local.get(["copilotData"]);

      if (result.copilotData) {
        console.log("üìä Data found:", result.copilotData);
        currentData = result.copilotData;
        updateDisplay(currentData);
        return true;
      } else {
        console.log("‚ö†Ô∏è No data found in storage");
        status.textContent = "Waiting for GitHub data...";
        status.className = "status connecting";
        return false;
      }
    } catch (error) {
      console.error("‚ùå Error fetching data:", error);
      status.textContent = "Error loading data";
      status.className = "status error";
      return false;
    }
  }

  // Event Listeners
  refreshBtn.addEventListener("click", async () => {
    refreshBtn.textContent = "‚è≥";
    refreshBtn.disabled = true;

    try {
      // ‡∏´‡∏≤ GitHub tabs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const tabs = await chrome.tabs.query({ url: "https://github.com/*" });
      console.log("üîç Found GitHub tabs:", tabs.length);

      if (tabs.length > 0) {
        // ‡∏™‡πà‡∏á message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á tab ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        await chrome.tabs.sendMessage(tabs[0].id, { action: "forceUpdate" });
        console.log("üì§ Force update sent to tab:", tabs[0].id);
      }

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      setTimeout(async () => {
        await fetchData();
        refreshBtn.textContent = "üîÑ";
        refreshBtn.disabled = false;
      }, 1000);
    } catch (error) {
      console.error("Error refreshing:", error);
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ
      await fetchData();
      refreshBtn.textContent = "üîÑ";
      refreshBtn.disabled = false;
    }
  });

  closeBtn.addEventListener("click", () => {
    window.close();
  });

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ window ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
  let isDragging = false;
  let isResizing = false;
  let startX, startY, initialLeft, initialTop, initialWidth, initialHeight;

  const resizeHandle = document.getElementById("resizeHandle");

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢ window
  document.addEventListener("mousedown", (e) => {
    // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏≤‡∏Å‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠ resize handle
    if (e.target.tagName === "BUTTON" || e.target.id === "resizeHandle") return;

    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á window
    chrome.windows.getCurrent((currentWindow) => {
      initialLeft = currentWindow.left;
      initialTop = currentWindow.top;
    });

    document.body.style.cursor = "move";
    e.preventDefault();
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î window
  resizeHandle.addEventListener("mousedown", (e) => {
    isResizing = true;
    startX = e.clientX;
    startY = e.clientY;

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á window
    chrome.windows.getCurrent((currentWindow) => {
      initialWidth = currentWindow.width;
      initialHeight = currentWindow.height;
    });

    e.stopPropagation();
    e.preventDefault();
  });

  document.addEventListener("mousemove", (e) => {
    if (isDragging && !isResizing) {
      const deltaX = e.clientX - startX;
      const deltaY = e.clientY - startY;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á window
      chrome.windows.getCurrent((currentWindow) => {
        chrome.windows.update(currentWindow.id, {
          left: initialLeft + deltaX,
          top: initialTop + deltaY,
        });
      });
    } else if (isResizing) {
      const deltaX = e.clientX - startX;
      const deltaY = e.clientY - startY;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 250x120)
      const newWidth = Math.max(250, initialWidth + deltaX);
      const newHeight = Math.max(120, initialHeight + deltaY);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î window
      chrome.windows.getCurrent((currentWindow) => {
        chrome.windows.update(currentWindow.id, {
          width: newWidth,
          height: newHeight,
        });
      });
    }
  });

  document.addEventListener("mouseup", () => {
    isDragging = false;
    isResizing = false;
    document.body.style.cursor = "default";
  });

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  fetchData();

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  updateInterval = setInterval(fetchData, 2000);

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î window
  window.addEventListener("beforeunload", () => {
    if (updateInterval) {
      clearInterval(updateInterval);
    }

    if (windowResizeObserver) {
      windowResizeObserver.disconnect();
    }
  });

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  handleWindowResize();

  console.log("üöÄ Pin window initialized");
});
